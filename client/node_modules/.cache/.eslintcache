[{"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\index.js":"1","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\App.js":"2","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\reportWebVitals.js":"3","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\Album.js":"4","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\Posts.js":"5","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\Upload.js":"6","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\AddPost.js":"7","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\config.js":"8"},{"size":500,"mtime":1620354867255,"results":"9","hashOfConfig":"10"},{"size":498,"mtime":1620544793792,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1620354867255,"results":"12","hashOfConfig":"10"},{"size":9068,"mtime":1620545107717,"results":"13","hashOfConfig":"10"},{"size":5173,"mtime":1620545151108,"results":"14","hashOfConfig":"10"},{"size":12358,"mtime":1620545198877,"results":"15","hashOfConfig":"10"},{"size":10181,"mtime":1620544877155,"results":"16","hashOfConfig":"10"},{"size":361,"mtime":1620551623249,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"wjcixs",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\index.js",[],["39","40"],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\App.js",[],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\reportWebVitals.js",[],"C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\Album.js",["41","42","43","44","45","46","47","48","49","50","51"],"import React, {useState, useEffect} from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport {firebase} from \"./App\";\nimport CustomizedDialogs from \"./Upload\"\nimport PostDialog from \"./Posts\"\nimport { Badge } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddPost from './AddPost';\nimport EcoIcon from '@material-ui/icons/Eco';\nimport {SERVER} from  \"./config\"\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\n\nexport default function Album(props) {\n  const classes = useStyles();\n  const [cards, setCards] = useState([])\n  const [user, setUser] = useState(firebase.auth().currentUser)\n  const [reload, setReload] = useState(0)\n\n  useEffect(() => {\n    // Update the document title using the browser API\n\n    onFetchData()\n  }, [reload]);\n\n\n  const triggerFetch = () => {\n    setReload(reload+1)\n  }\n  const onFetchData = async e => {\n\n    // e.preventDefault();\n    try {\n      const response = await fetch(`http://${SERVER}/plants/search`)\n      const jsonData = await response.json()\n\n      console.log(jsonData)\n      setCards(jsonData)\n    } catch (err) {\n      console.log(err.message)\n    }\n  }\n\n  async function onDeleteData(plant_id) {\n    console.log(\"deleting\", plant_id)\n    // e.preventDefault();\n    try {\n      const response = await fetch(`http://${SERVER}/plants/${plant_id}`,{\n        method: \"DELETE\",\n        headers: {\"Content-Type\": \"application/json\"},\n      })\n\n      const jsonData = await response.json()\n      console.log(jsonData)\n      setReload(reload+1)\n    } catch (err) {\n      console.log(err.message)\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <EcoIcon className={classes.icon} />\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Plantsta\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography component=\"h1\" variant=\"h3\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              Welcome to Plantsta!\n            </Typography>\n            <Typography variant=\"h6\" align=\"center\" color=\"textSecondary\" paragraph>\n              Document the lifecycle of your plants from seed to maturity! Explore other plant journeys by clicking \"view\" on a plant profile. Optionally list your plant for sale and connect with other sellers for plant trades. \n              Upload a plant profile anonymously, or connect with Google to add updates to your plant journeys and enable buyers to connect with you.   \n            </Typography>\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  {user && !user.isAnonymous ?\n                     <Button variant=\"contained\" color=\"primary\" onClick={()=>{\n                      firebase.auth().signOut().then(() => {\n                          // Sign-out successful.\n\n                          console.log(\"sign out successful\")\n                          setUser(null)\n                          setReload(reload+1)\n                        }).catch((error) => {\n                          // An error happened.\n                          console.log(\"error with sign out\")\n                         \n                        });\n                     }}> \n                     Sign Out\n                     </Button>\n                    :\n                    <Button variant=\"contained\" color=\"primary\" onClick={()=>{\n                     firebase.auth()\n                     .signInWithPopup(props.provider)\n                     .then((result) => {\n                       /** @type {firebase.auth.OAuthCredential} */\n                       var credential = result.credential;\n                      \n                       // This gives you a Google Access Token. You can use it to access the Google API.\n                       var token = credential.accessToken;\n                       // The signed-in user info.\n                       var user = result.user;\n                       setUser(user)\n                       // ...\n                     }).catch((error) => {\n                       // Handle Errors here.\n                       var errorCode = error.code;\n                       var errorMessage = error.message;\n                       // The email of the user's account used.\n                       var email = error.email;\n                       // The firebase.auth.AuthCredential type that was used.\n                       var credential = error.credential;\n                       // ...\n                     });\n                  }}>\n                    Sign In\n                  </Button>\n\n                }\n                </Grid>\n                <Grid item>\n                  {/* <Button variant=\"outlined\" color=\"primary\">\n                    Secondary action\n                  </Button> */}\n                  <CustomizedDialogs user={user} reloadFunction={triggerFetch} setUserFunction={setUser}/>\n                </Grid>\n              </Grid>\n            </div>\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid container spacing={4}>\n            {cards.map((card) => (\n              <Grid item key={card.plant_id} xs={12} sm={6} md={4}>\n                <Badge badgeContent={card.for_sale ? \"selling\": \"\"} color=\"secondary\" invisible={card.for_sale ? false:true}>\n                  <Card className={classes.card}>\n                    <CardMedia\n                      className={classes.cardMedia}\n                      image={card.image}\n                      title=\"Image title\"\n                    />\n                    <CardContent className={classes.cardContent}>\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {card.plant}\n                      </Typography>\n                      <Typography> \n                        by {!user || card.user_id != user.email ?  (card.user_id.startsWith(\"anon-user\") ? \"Anonymous\" : card.user_id) : \"Me\"} \n                      </Typography>\n                    </CardContent>\n                    <CardActions>\n                    \n                      <PostDialog card={card}  />\n\n                      <Button size=\"small\" color=\"primary\" disabled={!user || card.user_id != user.email}>\n                        {!user || card.user_id != user.email ? \"\" : <AddPost user={user} reloadFunction={triggerFetch} plant_id = {card.plant_id}/>}\n                      </Button>\n\n                      <Button size=\"small\" color=\"primary\" disabled={!user || card.user_id != user.email} onClick={() => onDeleteData(card.plant_id)}>\n                      {!user || card.user_id != user.email ? \"\" : <DeleteIcon/>}\n                      </Button>\n\n                    </CardActions>\n                  </Card>\n                  </Badge>\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Footer\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          Something here to give the footer a purpose!\n        </Typography>\n        <Copyright />\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\Posts.js",["52","53","54","55"],"import React from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport {SERVER} from  \"./config\"\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n      width: 500,\n      height: 450,\n    },\n    icon: {\n      color: 'rgba(255, 255, 255, 0.54)',\n    },\n  }));\n  \n  export function TitlebarGridList(props) {\n    const itemData = props.itemData\n    const {image, variety, plant, plant_id, user_id, for_sale} = props.plant\n\n    const classes = useStyles();\n  \n    return (\n      <div className={classes.root}>\n        <GridList cellHeight={300} className={classes.gridList} cols = {1}>\n          <GridListTile key=\"Subheader\" cols={1} style={{ height: 'auto' }}>\n        <ListSubheader component=\"div\">{variety} by {user_id}</ListSubheader>\n          </GridListTile>\n          {itemData.map((tile) => (\n            <GridListTile key={tile.post_id}>\n              <img src={tile.image} alt={tile.caption} />\n              <GridListTileBar\n                title={tile.stage}\n                //{<Typography variant=\"subtitle1\">{tile.stage}</Typography>}\n                subtitle = {tile.caption + \" - \" + tile.date_posted}\n                // {\n                //     <div>\n                //         <Typography variant=\"caption\" >{tile.caption}</Typography>\n                //         <Typography fontStyle=\"italic\"> {tile.date_posted}</Typography>\n                //     </div>\n                // }\n                actionIcon={\n                  <IconButton aria-label={`info about ${tile.caption}`} className={classes.icon}>\n                    <FavoriteIcon />\n                  </IconButton>\n                }\n              />\n            </GridListTile>\n          ))}\n        </GridList>\n      </div>\n    );\n  }\n\nconst styles = (theme) => ({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n  \n  const DialogTitle = withStyles(styles)((props) => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\n        <Typography variant=\"h6\">{children}</Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </MuiDialogTitle>\n    );\n  });\n  \n  const DialogContent = withStyles((theme) => ({\n    root: {\n      padding: theme.spacing(2),\n    },\n  }))(MuiDialogContent);\n  \n  const DialogActions = withStyles((theme) => ({\n    root: {\n      margin: 0,\n      padding: theme.spacing(1),\n    },\n  }))(MuiDialogActions);\n  \nexport default function PostDialog(props) {\n    // const card = props.card\n    const {image, variety, plant, plant_id, user_id, for_sale} = props.card\n    const [open, setOpen] = React.useState(false);\n    const [ itemData, setItemData ] = React.useState([]);\n\n    \n    const onFetchData = async e => {\n\n        // e.preventDefault();\n        try {\n        const response = await fetch(`http://${SERVER}/posts/${plant_id}`)\n        const jsonData = await response.json()\n\n        console.log(jsonData)\n        setItemData(jsonData)\n        } catch (err) {\n        console.log(err.message)\n        }\n    }\n  \n    const handleClickOpen = () => {\n        onFetchData()\n        console.log(image, variety, plant, plant_id, user_id, for_sale)\n        setOpen(true);\n    };\n    const handleClose = () => {\n      setOpen(false);\n    };\n  \n    return (\n      <div>\n        <Button color=\"primary\" onClick={handleClickOpen}>\n          View\n        </Button>\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n          <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n            {plant}\n          </DialogTitle>\n          <DialogContent dividers>\n          <TitlebarGridList itemData={itemData} plant ={props.card}/>\n                \n          </DialogContent>\n          <DialogActions>\n            {props.card.for_sale ? <Button> Message Seller</Button> : \"\"}\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n  \n  ","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\Upload.js",["56","57","58","59","60","61","62","63","64","65"],"import React, {useState, useEffect}from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport {SERVER} from  \"./config\"\n// import MuiAlert from '@material-ui/lab/Alert';\n\n// function Alert(props) {\n//   return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n// }\n\n\nimport {storage, firebase} from './App'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n  resetContainer: {\n    padding: theme.spacing(3),\n  },\n}));\n\n\n\nexport function VerticalLinearStepper(props) {\n\n  const classes = useStyles();\n\n  // const [currentUser, setCurrentUser] = useState(props.user)\n  const [activeStep, setActiveStep] = useState(0);\n  const [imageAsFile, setImageAsFile] = useState('')\n  const [imageAsUrl, setImageAsUrl] = useState('')\n  const [stage, setStage] = useState(\"Seed\")\n  const [forSale, setForSale] = useState(false)\n  const [plant, setPlant] = useState(\"\")\n  const [variety, setvariety] = useState(\"\")\n  const [caption, setCaption] = useState(\"\")\n  const [uploadStatus, setUploadStatus] = useState(\"\")\n\n  const storageRef = storage.ref();\n\n\n  const handleImageAsFile = (e) => {\n    const image = e.target.files[0]\n    setImageAsFile(imageAsFile => (image))\n  }\n\n\n  const imageFileType = (name) => {\n    if (name.endsWith(\".jpg\") || name.endsWith(\".jpeg\") || name.endsWith(\".png\")) return true\n\n    return false\n  }\n\n  const handleFireBaseUpload = (user = props.user) => {\n    // e.preventDefault()\n    console.log('start of upload')\n    // async magic goes here...\n\n    if(imageAsFile === '' || !imageFileType(imageAsFile.name) ) {\n        let errorMsg = `file must be a jpeg/png image`\n        setUploadStatus(\"error: \" +errorMsg)\n    } else{\n        var current = new Date().valueOf();\n        const url = `/images/${current}${imageAsFile.name}`\n        const imageRef = storageRef.child(url)\n\n        var uploadTask = imageRef.put(imageAsFile)\n\n        uploadTask.on('state_changed', \n            (snapshot) => {\n            // Observe state change events such as progress, pause, and resume\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            setUploadStatus(progress + '%')\n            console.log('Upload is ' + progress + '% done');\n            switch (snapshot.state) {\n                case firebase.storage.TaskState.PAUSED: // or 'paused'\n                console.log('Upload is paused');\n                break;\n                case firebase.storage.TaskState.RUNNING: // or 'running'\n                console.log('Upload is running');\n                break;\n            }\n            }, \n            (error) => {\n            // Handle unsuccessful uploads\n                console.log(\"error\")\n                setUploadStatus(\"error\")\n\n            }, \n            () => {\n                // Handle successful uploads on complete\n                // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n                uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n                  console.log('File available at', downloadURL);\n                  setImageAsUrl(downloadURL)\n                  onPostData(downloadURL, user)\n                  setUploadStatus(\"success\")\n                });\n              }\n        ); \n  \n    }\n\n  \n  }\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const onPostData = async (downloadURL, user) => {\n\n    try {\n        const email = user ? user.email : \"anonymous\"\n        const plantName = plant? plant: \"Unknown Plant\"\n\n        const body = {\n            user_id : email,\n            plant: plantName,\n            for_sale: forSale,\n            image: downloadURL,\n            variety: variety,\n            stage: stage,\n            caption: caption\n        }\n\n        console.log(body)\n        const response = await fetch(`http://${SERVER}/plants`, {\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify(body)\n        });\n        console.log(response)\n\n    } catch (err){\n        console.log(err)\n    }\n  }\n\n  const handleSubmit = async () => {\n    setOpen(true)\n\n    // check if signed in, if not, vreate anonymous session\n    if (!props.user) {\n      await firebase.auth().signInAnonymously()\n      .then((result) => {\n        console.log(result.user)\n\n        const tempUser = {\n          'uid': result.user.uid,\n          'email': \"anon-user-\"+result.user.uid,\n          'isAnonymous': true\n        }\n        props.setUserFunction(tempUser)\n\n        handleFireBaseUpload(tempUser)\n        // setCurrentUser(tempUser)\n        // Signed in..\n      })\n      .catch((error) => {\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        console.log(error.message)\n        // ...\n      });\n     \n    } else {\n      handleFireBaseUpload()\n    }\n    \n   \n    // props.handleClose();\n\n  };\n\n  const handleStageChange = (e) => {\n    setStage(e.target.value)\n  };\n\n\n  const steps = ['Create a Plant Profile', 'Upload your post'];\n\n  const getStepContent = (step) => {\n    switch (step) {\n      case 0:\n        return <form>\n                  <div>                 \n                       <TextField required id=\"standard-required\" label=\"Plant\" defaultValue=\"\" onChange={e => setPlant(e.target.value)} />\n                  </div>\n                  <div>\n                      <TextField id=\"standard-required\" label=\"Variety \" defaultValue={\"\"} onChange={e => setvariety(e.target.value)}/>\n                  </div>\n                  <div>\n                  <FormControlLabel\n                      control={\n                      <Checkbox\n                          checked={forSale}\n                          onChange={e => {\n                              setForSale(e.target.checked)\n                          }}\n                          name=\"forSale\"\n                          color=\"primary\"\n                      />\n                      }\n                      label=\"For Sale\"\n                  />\n                  </div>\n              </form>\n      case 1:\n        return <form>\n           \n            <input\n                type=\"file\"\n                onChange={handleImageAsFile}\n                // hidden\n            />\n             <div>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">Stage</InputLabel>\n                <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={stage}\n                onChange={handleStageChange}\n                >\n                <MenuItem value='Seed'>Seed</MenuItem>\n                <MenuItem value='Seedling'>Seedling</MenuItem>\n                <MenuItem value='Flowering'>Flowering</MenuItem>\n                <MenuItem value='Fruiting'>Fruiting</MenuItem>\n                <MenuItem value='Mature'>Mature</MenuItem>\n                </Select>\n            </FormControl>\n            </div>\n            <div>\n                <TextField id=\"standard-required\" label=\"Caption\" defaultValue={\"\"} onChange={e => setCaption(e.target.value)} />\n            </div>\n\n\n        </form>;\n      default:\n        return 'Unknown step';\n    }\n  }\n  \n  const [open, setOpen] = useState(false)\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    if (uploadStatus == \"success\") {\n      props.handleClose()\n      props.reloadFunction();\n    }\n    \n  }, [uploadStatus]);\n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        {steps.map((label, index) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              <Typography>{getStepContent(index)}</Typography>\n              <div className={classes.actionsContainer}>\n                <div>\n                 \n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={activeStep === steps.length - 1 ? handleSubmit : handleNext}\n                    className={classes.button}\n                    disabled={uploadStatus != \"\"}\n                  >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                  </Button>\n                </div>\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n      <Snackbar open={open} \n       message={uploadStatus}\n       action={\n         <React.Fragment>\n           <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n             <CloseIcon fontSize=\"small\" />\n           </IconButton>\n         </React.Fragment>\n       }>\n       \n      </Snackbar>\n    \n    </div>\n  );\n}\n\nconst styles = (theme) => ({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n  \n  const DialogTitle = withStyles(styles)((props) => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\n        <Typography variant=\"h6\">{children}</Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </MuiDialogTitle>\n    );\n  });\n  \n  const DialogContent = withStyles((theme) => ({\n    root: {\n      padding: theme.spacing(2),\n    },\n  }))(MuiDialogContent);\n  \n  const DialogActions = withStyles((theme) => ({\n    root: {\n      margin: 0,\n      padding: theme.spacing(1),\n    },\n  }))(MuiDialogActions);\n  \nexport default function CustomizedDialogs(props) {\n\n    const [open, setOpen] = React.useState(false);\n  \n    const handleClickOpen = () => {\n      setOpen(true);\n    };\n    const handleClose = () => {\n      setOpen(false);\n    };\n  \n    return (\n      <div>\n        <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n          Upload Plant \n        </Button>\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n          <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n            New Plant Profile\n          </DialogTitle>\n          <DialogContent dividers>\n            <VerticalLinearStepper handleClose= {handleClose} user={props.user} setUserFunction={props.setUserFunction} reloadFunction={props.reloadFunction}/>\n          </DialogContent>\n          {/* <DialogActions>\n         \n          </DialogActions> */}\n        </Dialog>\n      </div>\n    );\n  }\n  ","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\AddPost.js",["66","67","68","69","70","71","72","73","74","75","76","77"],"import React, {useState, useEffect}from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport AddIcon from '@material-ui/icons/Add';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport {SERVER} from  \"./config\"\n\nimport {storage, firebase} from './App'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n  resetContainer: {\n    padding: theme.spacing(3),\n  },\n}));\n\n\n\nexport function Steps(props) {\n\n  const user = props.user\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = useState(0);\n  const [imageAsFile, setImageAsFile] = useState('')\n  const [imageAsUrl, setImageAsUrl] = useState('')\n  const [stage, setStage] = useState(\"Seed\")\n  const [caption, setCaption] = useState(\"\")\n  const [uploadStatus, setUploadStatus] = useState(\"\")\n\n  const storageRef = storage.ref();\n\n\n  const handleImageAsFile = (e) => {\n    const image = e.target.files[0]\n    setImageAsFile(imageAsFile => (image))\n  }\n\n  const imageFileType = (name) => {\n    if (name.endsWith(\".jpg\") || name.endsWith(\".jpeg\") || name.endsWith(\".png\")) return true\n\n    return false\n  }\n\n  const handleFireBaseUpload = e => {\n    // e.preventDefault()\n    console.log('start of upload')\n    // async magic goes here...\n\n    if(imageAsFile === '' || !imageFileType(imageAsFile.name)) {\n        console.error(`not an image, the image file is a ${typeof(imageAsFile)}`)\n        let errorMsg = `file must be a jpeg/png image`\n        setUploadStatus(\"error: \" +errorMsg)\n      } else{\n        var current = new Date().valueOf();\n        const url = `/images/${current}${imageAsFile.name}`\n        const imageRef = storageRef.child(url)\n\n        var uploadTask = imageRef.put(imageAsFile)\n\n        uploadTask.on('state_changed', \n            (snapshot) => {\n            // Observe state change events such as progress, pause, and resume\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            setUploadStatus(progress+ \"%\")\n\n            console.log('Upload is ' + progress + '% done');\n            switch (snapshot.state) {\n                case firebase.storage.TaskState.PAUSED: // or 'paused'\n                console.log('Upload is paused');\n                break;\n                case firebase.storage.TaskState.RUNNING: // or 'running'\n                console.log('Upload is running');\n                break;\n            }\n            }, \n            (error) => {\n            // Handle unsuccessful uploads\n            setUploadStatus(\"error\")\n\n                console.log(\"error\")\n            }, \n            () => {\n                // Handle successful uploads on complete\n                // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n                uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n                  console.log('File available at', downloadURL);\n                  setImageAsUrl(downloadURL)\n                  onPostData(downloadURL)\n                  setUploadStatus(\"success\")\n\n                  \n                });\n              }\n        ); \n  \n    }\n\n  \n  }\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const onPostData = async (downloadURL) => {\n\n    try {\n        const body = {\n            plant_id: props.plant_id,  \n            image: downloadURL,\n            stage: stage,\n            caption: caption\n        }\n\n        console.log(body)\n        const response = await fetch( `http://${SERVER}/posts`, {\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify(body)\n        });\n        console.log(response)\n\n    } catch (err){\n        console.log(err)\n    }\n  }\n\n  const handleSubmit =  () => {\n    setOpen(true)\n    const success = handleFireBaseUpload()\n\n  };\n\n  const handleStageChange = (e) => {\n    setStage(e.target.value)\n  };\n\n\n  const steps = ['Upload your post'];\n\n  const getStepContent = (step) => {\n    switch (step) {\n      case 0:\n        return <form>\n           \n            <input\n                type=\"file\"\n                onChange={handleImageAsFile}\n                // hidden\n            />\n             <div>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">Stage</InputLabel>\n                <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={stage}\n                onChange={handleStageChange}\n                >\n                <MenuItem value='Seed'>Seed</MenuItem>\n                <MenuItem value='Seedling'>Seedling</MenuItem>\n                <MenuItem value='Flowering'>Flowering</MenuItem>\n                <MenuItem value='Fruiting'>Fruiting</MenuItem>\n                <MenuItem value='Mature'>Mature</MenuItem>\n                </Select>\n            </FormControl>\n            </div>\n            <div>\n                <TextField id=\"standard-required\" label=\"Caption\" defaultValue={\"\"} onChange={e => setCaption(e.target.value)} />\n            </div>\n\n\n        </form>;\n      default:\n        return 'Unknown step';\n    }\n  }\n\n  const [open, setOpen] = useState(false)\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    if (uploadStatus == \"success\") {\n      props.handleClose()\n      props.reloadFunction();\n    }\n    \n  }, [uploadStatus]);\n\n  \n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        {steps.map((label, index) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              <Typography>{getStepContent(index)}</Typography>\n              <div className={classes.actionsContainer}>\n                <div>\n                 \n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={activeStep === steps.length - 1 ? handleSubmit : handleNext}\n                    className={classes.button}\n                    disabled={uploadStatus != \"\"}\n                  >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                  </Button>\n                </div>\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n      <Snackbar open={open} \n       message={uploadStatus}\n       action={\n         <React.Fragment>\n           <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n             <CloseIcon fontSize=\"small\" />\n           </IconButton>\n         </React.Fragment>\n       }>\n       \n      </Snackbar>\n    \n    </div>\n  );\n}\n\nconst styles = (theme) => ({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n  \n  const DialogTitle = withStyles(styles)((props) => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\n        <Typography variant=\"h6\">{children}</Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </MuiDialogTitle>\n    );\n  });\n  \n  const DialogContent = withStyles((theme) => ({\n    root: {\n      padding: theme.spacing(2),\n    },\n  }))(MuiDialogContent);\n  \n  const DialogActions = withStyles((theme) => ({\n    root: {\n      margin: 0,\n      padding: theme.spacing(1),\n    },\n  }))(MuiDialogActions);\n  \nexport default function AddPost(props) {\n\n    const [open, setOpen] = React.useState(false);\n  \n    const handleClickOpen = () => {\n      setOpen(true);\n    };\n    const handleClose = () => {\n      setOpen(false);\n    };\n  \n    return (\n      <div>\n        <Button color=\"primary\" onClick={handleClickOpen}>\n          <AddIcon/>\n        </Button>\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n          <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n            New Plant Profile\n          </DialogTitle>\n          <DialogContent dividers>\n            <Steps handleClose= {handleClose} user={props.user} reloadFunction={props.reloadFunction} plant_id={props.plant_id}/>\n          </DialogContent>\n          {/* <DialogActions>\n         \n          </DialogActions> */}\n        </Dialog>\n      </div>\n    );\n  }\n  ","C:\\Users\\jessi\\OneDrive\\Documents\\GitHub\\plant-sta\\client\\src\\config.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":19,"column":8,"nodeType":"84","messageId":"85","endLine":19,"endColumn":15},{"ruleId":"82","severity":1,"message":"86","line":168,"column":28,"nodeType":"84","messageId":"85","endLine":168,"endColumn":33},{"ruleId":"82","severity":1,"message":"87","line":175,"column":28,"nodeType":"84","messageId":"85","endLine":175,"endColumn":37},{"ruleId":"82","severity":1,"message":"88","line":176,"column":28,"nodeType":"84","messageId":"85","endLine":176,"endColumn":40},{"ruleId":"82","severity":1,"message":"89","line":178,"column":28,"nodeType":"84","messageId":"85","endLine":178,"endColumn":33},{"ruleId":"82","severity":1,"message":"90","line":180,"column":28,"nodeType":"84","messageId":"85","endLine":180,"endColumn":38},{"ruleId":"91","severity":1,"message":"92","line":216,"column":51,"nodeType":"93","messageId":"94","endLine":216,"endColumn":53},{"ruleId":"91","severity":1,"message":"92","line":223,"column":92,"nodeType":"93","messageId":"94","endLine":223,"endColumn":94},{"ruleId":"91","severity":1,"message":"92","line":224,"column":48,"nodeType":"93","messageId":"94","endLine":224,"endColumn":50},{"ruleId":"91","severity":1,"message":"92","line":227,"column":92,"nodeType":"93","messageId":"94","endLine":227,"endColumn":94},{"ruleId":"91","severity":1,"message":"92","line":228,"column":46,"nodeType":"93","messageId":"94","endLine":228,"endColumn":48},{"ruleId":"82","severity":1,"message":"95","line":38,"column":12,"nodeType":"84","messageId":"85","endLine":38,"endColumn":17},{"ruleId":"82","severity":1,"message":"96","line":38,"column":28,"nodeType":"84","messageId":"85","endLine":38,"endColumn":33},{"ruleId":"82","severity":1,"message":"97","line":38,"column":35,"nodeType":"84","messageId":"85","endLine":38,"endColumn":43},{"ruleId":"82","severity":1,"message":"98","line":38,"column":54,"nodeType":"84","messageId":"85","endLine":38,"endColumn":62},{"ruleId":"82","severity":1,"message":"99","line":22,"column":8,"nodeType":"84","messageId":"85","endLine":22,"endColumn":22},{"ruleId":"82","severity":1,"message":"100","line":62,"column":10,"nodeType":"84","messageId":"85","endLine":62,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":107,"column":13,"nodeType":"103","messageId":"104","endLine":114,"endColumn":14},{"ruleId":"82","severity":1,"message":"105","line":143,"column":9,"nodeType":"84","messageId":"85","endLine":143,"endColumn":19},{"ruleId":"82","severity":1,"message":"87","line":197,"column":13,"nodeType":"84","messageId":"85","endLine":197,"endColumn":22},{"ruleId":"82","severity":1,"message":"88","line":198,"column":13,"nodeType":"84","messageId":"85","endLine":198,"endColumn":25},{"ruleId":"91","severity":1,"message":"106","line":293,"column":22,"nodeType":"93","messageId":"94","endLine":293,"endColumn":24},{"ruleId":"107","severity":1,"message":"108","line":298,"column":6,"nodeType":"109","endLine":298,"endColumn":20,"suggestions":"110"},{"ruleId":"91","severity":1,"message":"92","line":316,"column":44,"nodeType":"93","messageId":"94","endLine":316,"endColumn":46},{"ruleId":"82","severity":1,"message":"111","line":375,"column":9,"nodeType":"84","messageId":"85","endLine":375,"endColumn":22},{"ruleId":"82","severity":1,"message":"112","line":18,"column":8,"nodeType":"84","messageId":"85","endLine":18,"endColumn":24},{"ruleId":"82","severity":1,"message":"113","line":19,"column":8,"nodeType":"84","messageId":"85","endLine":19,"endColumn":16},{"ruleId":"82","severity":1,"message":"99","line":22,"column":8,"nodeType":"84","messageId":"85","endLine":22,"endColumn":22},{"ruleId":"82","severity":1,"message":"114","line":51,"column":9,"nodeType":"84","messageId":"85","endLine":51,"endColumn":13},{"ruleId":"82","severity":1,"message":"100","line":55,"column":10,"nodeType":"84","messageId":"85","endLine":55,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":98,"column":13,"nodeType":"103","messageId":"104","endLine":105,"endColumn":14},{"ruleId":"82","severity":1,"message":"105","line":136,"column":9,"nodeType":"84","messageId":"85","endLine":136,"endColumn":19},{"ruleId":"82","severity":1,"message":"115","line":165,"column":11,"nodeType":"84","messageId":"85","endLine":165,"endColumn":18},{"ruleId":"91","severity":1,"message":"106","line":226,"column":22,"nodeType":"93","messageId":"94","endLine":226,"endColumn":24},{"ruleId":"107","severity":1,"message":"108","line":231,"column":6,"nodeType":"109","endLine":231,"endColumn":20,"suggestions":"116"},{"ruleId":"91","severity":1,"message":"92","line":251,"column":44,"nodeType":"93","messageId":"94","endLine":251,"endColumn":46},{"ruleId":"82","severity":1,"message":"111","line":310,"column":9,"nodeType":"84","messageId":"85","endLine":310,"endColumn":22},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'AddIcon' is defined but never used.","Identifier","unusedVar","'token' is assigned a value but never used.","'errorCode' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'email' is assigned a value but never used.","'credential' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'image' is assigned a value but never used.","'plant' is assigned a value but never used.","'plant_id' is assigned a value but never used.","'for_sale' is assigned a value but never used.","'FormHelperText' is defined but never used.","'imageAsUrl' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'handleBack' is assigned a value but never used.","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["119"],"'DialogActions' is assigned a value but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'user' is assigned a value but never used.","'success' is assigned a value but never used.",["120"],"no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"121","fix":"123"},"Update the dependencies array to be: [props, uploadStatus]",{"range":"124","text":"125"},{"range":"126","text":"125"},[9099,9113],"[props, uploadStatus]",[6980,6994]]